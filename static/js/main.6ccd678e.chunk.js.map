{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","filterValue","sortBy","this","props","allTodos","selectedUserId","selectUser","todosForRender","filter","todo","completed","title","includes","className","map","classNames","htmlFor","id","toString","type","readOnly","checked","userId","onClick","name","onChange","event","setState","target","value","React","Component","request","url","fetch","then","response","ok","Error","status","statusText","json","getUser","CurrentUser","user","loader","a","selectedUser","prevProps","email","phone","clearSelectedUser","App","hasLoadingError","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ccd678e.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\nimport classNames from 'classnames';\n\ntype Props = {\n  allTodos: Todo[],\n  selectedUserId: number,\n  selectUser: (selectedUserId: number) => void,\n};\n\ntype State = {\n  filterValue: string,\n  sortBy: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    filterValue: '',\n    sortBy: '',\n  };\n\n  render() {\n    const { filterValue, sortBy } = this.state;\n    const { allTodos, selectedUserId, selectUser } = this.props;\n\n    let todosForRender = allTodos;\n\n    switch (sortBy) {\n      case 'all':\n        todosForRender = allTodos;\n        break;\n\n      case 'active':\n        todosForRender = allTodos.filter(todo => todo.completed === false);\n        break;\n\n      case 'completed':\n        todosForRender = allTodos.filter(todo => todo.completed === true);\n        break;\n\n      default:\n        break;\n    }\n\n    if (filterValue) {\n      todosForRender = todosForRender.filter(todo => todo.title.includes(filterValue));\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n\n            {todosForRender.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', { 'TodoList__item--unchecked': todo.completed === false, 'TodoList__item--checked': todo.completed === true })}\n              >\n                <label htmlFor={todo.id.toString()}>\n                  <input\n                    id={todo.id.toString()}\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button', 'button', { 'TodoList__user-button--selected': todo.userId === selectedUserId })}\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n\n          <select\n            name=\"sortBy\"\n            className=\"TodoList__select\"\n            onChange={(event) => this.setState({ sortBy: event.target.value })}\n          >\n            <option value=\"\">Select filter</option>\n            <option value=\"all\">ALL</option>\n            <option value=\"active\">ACTIVE</option>\n            <option value=\"completed\">COMPLETED</option>\n          </select>\n\n          <label htmlFor=\"filter\">\n            <input\n              id=\"filter\"\n              className=\"TodoList__filter\"\n              type=\"text\"\n              name=\"filterValue\"\n              value={filterValue}\n              onChange={(event) => this.setState({ filterValue: event.target.value })}\n            />\n            Enter keyword\n          </label>\n\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n\nexport const getActiveTodos = () => {\n  return request('/todos?completed=false');\n};\n\nexport const getCompletedTodos = () => {\n  return request('/todos?completed=true');\n};\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api/api';\n\ninterface User {\n  id: number,\n  name: string,\n  email: string,\n  phone: string,\n}\n\ntype State = {\n  user: User | null,\n};\n\ntype Props = {\n  userId: number,\n  clearSelectedUser: () => void,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loader();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loader();\n    }\n  }\n\n  loader = async () => {\n    const selectedUser = await getUser(this.props.userId);\n\n    this.setState({ user: selectedUser });\n  };\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <h2>No user data</h2>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={() => this.props.clearSelectedUser()}\n        >\n          CLEAR\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  allTodos: Todo[],\n  hasLoadingError: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    allTodos: [],\n    hasLoadingError: false,\n  };\n\n  async componentDidMount() {\n    try {\n      const allTodos = await getTodos();\n\n      this.setState({ allTodos });\n    } catch (error) {\n      this.setState({\n        hasLoadingError: true,\n      });\n    }\n  }\n\n  selectUser = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      allTodos,\n      hasLoadingError,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          { hasLoadingError && <h2>No response, please try again later</h2>}\n          <TodoList\n            allTodos={allTodos}\n            selectedUserId={selectedUserId}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : <h2>No user selected</h2>}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}